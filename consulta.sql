-- QUAIS SÃO OS PROJETOS DE OBRA RELACIONADOS A CADA ENGENHEIRO?
-- LISTE O NOME DA OBRA, CNPJ DO CLIENTE, CODIGO DA OBRA E O TIPO DA OBRA
SELECT F.NOME, O.CNPJ_CLIENTE, O.CODIGO_OBRA, O.TIPO
FROM PROJETO P
JOIN OBRA O ON O.CNPJ_CLIENTE = P.CNPJ_CLIENTE AND O.CODIGO_OBRA = P.CODIGO_OBRA
JOIN ENGENHEIRO E ON E.CPF_ENGENHEIRO = P.CPF_ENGENHEIRO
JOIN FUNCIONARIO F ON F.CPF_FUNCIONARIO = E.CPF_ENGENHEIRO
ORDER BY E.CPF_ENGENHEIRO;

-- LISTE A QUANTIDADE DE ENGENHEIROS PARA CADA ESPECIALIZACAO
-- PARA AS ESPECIALIZAÇÕES QUE TEM MAIS DE UM ENGENHEIRO
SELECT ES.ESPECIALIZACAO, COUNT(*)
FROM ESPECIALIZACAO ES, ENGENHEIRO E  
WHERE E.CPF_ENGENHEIRO = ES.CPF_ENGENHEIRO
GROUP BY ES.ESPECIALIZACAO
HAVING COUNT(*) > 1

-- CRIE UMA VIEW QUE LISTE AS OBRAS (NOME DO CLIENTE, TIPO E DATA DE INICIO E ENTREGA) QUE JA FORAM CONCLUIDAS
-- ORDENADAS PELA DATA DE ENTREGA DA OBRA
DROP VIEW OBRAS_CONCLUIDAS;
CREATE VIEW OBRAS_CONCLUIDAS AS
SELECT C.NOME, O.TIPO, O.DATA_INICIO, O.DATA_ENTREGA
FROM OBRA O
JOIN CLIENTE C ON O.CNPJ_CLIENTE = C.CNPJ_CLIENTE
WHERE O.DATA_ENTREGA IS NOT NULL
ORDER BY O.DATA_INICIO;
SELECT * FROM OBRAS_CONCLUIDAS;

-- CRIANDO UM GATILHO PRA ATUALIZAR A CADA OBRA QUE É ADCIONADA, REMOVIDA OU EDITADA NO BANCO DE DADOS
CREATE SEQUENCE OBRA_AUDIT_SEQ;

CREATE TABLE OBRA_AUDITORIA (
    CODIGO NUMBER,
    ACAO VARCHAR2(7),
    CNPJ_CLIENTE NUMBER,
    CODIGO_OBRA NUMBER,
    NUMERO_REGISTROS NUMBER,
    HORA_ACAO TIMESTAMP,
    CONSTRAINT CODIGO_PK PRIMARY KEY (CODIGO)
);

CREATE OR REPLACE TRIGGER AUDITORIA_OBRA
FOR INSERT OR DELETE OR UPDATE ON OBRA 
COMPOUND TRIGGER 
DECLARE
X INTEGER;
OPERACAO VARCHAR2(7);
BEFORE STATEMENT IS 
BEGIN 
SELECT COUNT (*) INTO X FROM OBRA;
END BEFORE STATEMENT;
AFTER EACH ROW IS 
BEGIN 
IF INSERTING THEN
    X := X + 1;
    OPERACAO := 'INSERT';
ELSIF DELETING THEN
    X := X - 1;
    OPERACAO := 'DELETE';
ELSE OPERACAO := 'UPDATE';
END IF;
INSERT INTO OBRA_AUDITORIA(CODIGO, ACAO, CNPJ_CLIENTE, CODIGO_OBRA, NUMERO_REGISTROS, HORA_ACAO)
VALUES (OBRA_AUDIT_SEQ.NEXTVAL, OPERACAO, :NEW.CNPJ_CLIENTE, :NEW.CODIGO_OBRA, X, SYSTIMESTAMP);
END AFTER EACH ROW;
END AUDITORIA_OBRA;

-- PROCEDIMENTO QUE ATUALIZA OS SALARIOS ABAIXO DA MEDIA
CREATE OR REPLACE PROCEDURE ATUALIZA_SALARIO IS
   V_MEDIA_SALARIO NUMBER;
   v_FUNCIONARIO_REC FUNCIONARIO%ROWTYPE;
BEGIN
   -- Declaração da variável para armazenar a média salarial
   DECLARE
      V_MEDIA_SALARIO NUMBER;
   BEGIN
      -- Calcula a média salarial
      SELECT AVG(SALARIO) INTO V_MEDIA_SALARIO FROM FUNCIONARIO;
   END;

   -- Inicializa o cursor
   DECLARE
      CURSOR C_FUNCIONARIOS IS
         SELECT * FROM FUNCIONARIO WHERE SALARIO < V_MEDIA_SALARIO;
   BEGIN
      -- Abre o cursor
      OPEN C_FUNCIONARIOS;

      -- Processa os registros enquanto houver FUNCIONARIOS com salário abaixo da média
      WHILE (C_FUNCIONARIOS%FOUND) LOOP
         FETCH C_FUNCIONARIOS INTO V_FUNCIONARIO_REC;

         -- Atualiza o salário
         UPDATE FUNCIONARIO
         SET SALARIO = V_FUNCIONARIO_REC.SALARIO * 1.05
         WHERE CPF_FUNCIONARIO = V_FUNCIONARIO_REC.CPF_FUNCIONARIO;

         -- Verifica se há mais registros no cursor
         IF C_FUNCIONARIOS%NOTFOUND THEN
            EXIT;
         END IF;
      END LOOP;

      -- Fecha o cursor
      CLOSE C_FUNCIONARIOS;
   END;

   COMMIT; -- Confirma as alterações no banco de dados
END ATUALIZA_SALARIO;
/

-- PACOTE PARA ATUALIZAR AS OBRAS
CREATE OR REPLACE PACKAGE OBRAS_PACKAGE AS
   PROCEDURE ADICIONA_OBRA(
      p_codigo_obra OBRA.CODIGO_OBRA%TYPE,
      p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE,
      p_data_inicio OBRA.DATA_INICIO%TYPE,
      p_data_entrega OBRA.DATA_ENTREGA%TYPE,
      p_tipo OBRA.TIPO%TYPE,
      p_orcamento OBRA.ORCAMENTO%TYPE,
      p_cep OBRA.CEP%TYPE,
      p_numero_endereco OBRA.NUMERO_ENDERECO%TYPE
   );

   PROCEDURE REMOVE_OBRA(p_codigo_obra OBRA.CODIGO_OBRA%TYPE, p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE);

   PROCEDURE ATUALIZA_OBRA(
      p_codigo_obra OBRA.CODIGO_OBRA%TYPE,
      p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE,
      p_nova_data_entrega OBRA.DATA_ENTREGA%TYPE,
      p_novo_tipo OBRA.TIPO%TYPE
   );
END OBRAS_PACKAGE;
/

CREATE OR REPLACE PACKAGE BODY OBRAS_PACKAGE AS
   PROCEDURE ADICIONA_OBRA(
      p_codigo_obra OBRA.CODIGO_OBRA%TYPE,
      p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE,
      p_data_inicio OBRA.DATA_INICIO%TYPE,
      p_data_entrega OBRA.DATA_ENTREGA%TYPE,
      p_tipo OBRA.TIPO%TYPE,
      p_orcamento OBRA.ORCAMENTO%TYPE,
      p_cep OBRA.CEP%TYPE,
      p_numero_endereco OBRA.NUMERO_ENDERECO%TYPE
   ) IS
   BEGIN
      INSERT INTO OBRA (CODIGO_OBRA,CNPJ_CLIENTE,DATA_INICIO,DATA_ENTREGA,TIPO,ORCAMENTO,CEP,NUMERO_ENDERECO) 
      VALUES (p_codigo_obra, p_cnpj_cliente, p_data_inicio, p_data_entrega, p_tipo, p_orcamento, p_cep, p_numero_endereco);
   END ADICIONA_OBRA;

   PROCEDURE REMOVE_OBRA(p_codigo_obra OBRA.CODIGO_OBRA%TYPE, p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE) IS
   BEGIN
      DELETE FROM OBRA WHERE CODIGO_OBRA = p_codigo_obra AND CNPJ_CLIENTE = p_cnpj_cliente;
   END REMOVE_OBRA;

   PROCEDURE ATUALIZA_OBRA(
      p_codigo_obra OBRA.CODIGO_OBRA%TYPE,
      p_cnpj_cliente OBRA.CNPJ_CLIENTE%TYPE,
      p_nova_data_entrega OBRA.DATA_ENTREGA%TYPE,
      p_novo_tipo OBRA.TIPO%TYPE
   ) IS
   BEGIN
      UPDATE OBRA
      SET DATA_ENTREGA = p_nova_data_entrega, TIPO = p_novo_tipo
      WHERE CODIGO_OBRA = p_codigo_obra AND CNPJ_CLIENTE = p_cnpj_cliente;
   END ATUALIZA_OBRA;
END OBRAS_PACKAGE;
/

